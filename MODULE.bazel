module(
    name = "moon-base",
    version = "1.0",
)

####### PROTOBUF ##########
#bazel_dep(name = "toolchains_protoc", version = "0.3.6")
#
#protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")
#
#protoc.toolchain(
#    google_protobuf = "com_google_protobuf",
#    version = "v29.0-rc3",
#)
#
#use_repo(protoc, "com_google_protobuf", "toolchains_protoc_hub")

bazel_dep(name = "rules_python", version = "1.0.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "grpc", version = "1.69.0", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "protobuf", version = "29.2", repo_name = "com_google_protobuf")

# bazel_dep(name = "rules_apple", version = "3.13.0", repo_name = "build_bazel_rules_apple")
# bazel_dep(name = "apple_support", version = "1.17.1")
bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "abseil-cpp", version = "20240722.0.bcr.2", repo_name = "com_google_absl")
bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "rules_jvm_external", version = "6.6")
bazel_dep(name = "rules_go", version = "0.51.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "bazel_features", version = "1.23.0")
bazel_dep(name = "rules_rust", version = "0.54.1")
bazel_dep(name = "gazelle", version = "0.40.0", repo_name = "bazel_gazelle")

bazel_dep(name = "buildifier_prebuilt", version = "7.3.1", dev_dependency = True)

####### RUST ########
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.83.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

register_toolchains("@rules_rust//proto/protobuf:default-proto-toolchain")

register_toolchains("//tools/toolchains:prost_toolchain")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
    isolate = True,
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//protos/example_service:Cargo.toml",
        "//protos/doc_db:Cargo.toml",
        "//rust/helloworld_tonic:Cargo.toml",
        "//rust/doc_db:Cargo.toml",
    ],
    supported_platform_triples = [
        "aarch64-apple-darwin",
        "x86_64-unknown-linux-gnu",
    ],
)
crate.annotation(
    crate = "protoc-gen-prost",
    gen_binaries = ["protoc-gen-prost"],
)
crate.annotation(
    crate = "protoc-gen-tonic",
    gen_binaries = ["protoc-gen-tonic"],
)
use_repo(crate, "crates")

bazel_dep(name = "rules_java", version = "8.6.3")
bazel_dep(name = "contrib_rules_jvm", version = "0.27.0")

#bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
#git_override(
#    module_name = "hedron_compile_commands",
#    commit = "a14ad3a64e7bf398ab48105aaa0348e032ac87f8",
#    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
#)

#bazel_dep(name = "googletest", version = "1.15.2")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.0")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.gazelle_default_attributes(
    # Pointers here: https://github.com/bazelbuild/rules_go/blob/master/docs/go/core/bzlmod.md#gazelle-directives
    directives = [
        "gazelle:proto disable",
    ],
)
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_gofiber_fiber_v2",
    "com_github_google_uuid",
    "com_github_hashicorp_golang_lru_v2",
    "com_github_lib_pq",
    "com_github_stretchr_testify",
    "org_golang_google_grpc",
)

#non_module_deps = use_extension("//bazel:extensions.bzl", "non_module_deps")
#use_repo(non_module_deps, "mongoose_cc")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

JACKSON_VERSION = "2.17.1"

LOGBACK_VERSION = "1.5.6"

maven.install(
    artifacts = [
        "ch.qos.logback:logback-classic:%s" % LOGBACK_VERSION,
        "ch.qos.logback:logback-core:%s" % LOGBACK_VERSION,
        "com.fasterxml.jackson.core:jackson-annotations:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.core:jackson-core:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.core:jackson-databind:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.datatype:jackson-datatype-guava:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.module:jackson-module-scala_2.13:%s" % JACKSON_VERSION,
        "com.google.guava:guava:33.4.0-jre",
        "io.netty:netty-common:4.1.116.Final",
        "io.netty:netty-codec:4.1.116.Final",
        "io.netty:netty-handler:4.1.116.Final",
        "io.netty:netty-transport:4.1.116.Final",
        "io.sentry:sentry-logback:7.19.0",
        "junit:junit:4.13.2",
        "org.assertj:assertj-core:3.27.0",
        "org.scala-lang:scala3-library_3:jar:3.3.1",
        "org.scala-lang:scala3-compiler_3:3.3.1",
        "org.slf4j:slf4j-api:2.0.16",
    ],
    repositories = [
        "https://maven.google.com",
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "maven")

#bazel_dep(name = "grpc-java", version = "1.67.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_oci", version = "2.2.0")

# For testing, check out https://registry.bazel.build/modules/container_structure_test
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "docker_lib_ubuntu",
    digest = "sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab",
    image = "docker.io/library/ubuntu",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
use_repo(oci, "docker_lib_ubuntu", "docker_lib_ubuntu_linux_amd64", "docker_lib_ubuntu_linux_arm64_v8", "docker_lib_ubuntu_linux_arm_v7", "docker_lib_ubuntu_linux_ppc64le", "docker_lib_ubuntu_linux_s390x")
