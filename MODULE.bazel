module(
    name = "moon-base",
    version = "1.0",
)

bazel_dep(name = "toolchains_llvm", version = "1.1.2")
bazel_dep(name = "rules_python", version = "0.35.0")
bazel_dep(name = "protobuf", repo_name = "com_google_protobuf", version = "28.1")
bazel_dep(name = "grpc", repo_name = "com_github_grpc_grpc", version = "1.66.0.bcr.2")
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "rules_apple", repo_name = "build_bazel_rules_apple", version = "3.8.0")
bazel_dep(name = "apple_support", repo_name = "build_bazel_apple_support", version = "1.17.0")
bazel_dep(name = "rules_cc", version = "0.0.10")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "abseil-cpp", repo_name = "com_google_absl", version = "20240722.0")
bazel_dep(name = "rules_jvm_external", version = "6.3")
bazel_dep(name = "rules_go", repo_name = "io_bazel_rules_go", version = "0.50.1")
bazel_dep(name = "bazel_features", version = "1.17.0")
bazel_dep(name = "rules_rust", version = "0.50.1")
bazel_dep(name = "gazelle", repo_name = "bazel_gazelle", version = "0.38.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")

rust.toolchain(
    edition = "2021",
    versions = ["1.79.0"],
)

use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

register_toolchains("@rules_rust//proto/protobuf:default-proto-toolchain")

register_toolchains("//tools/toolchains:prost_toolchain")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
    isolate = True,
)

crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//protos/example_service:Cargo.toml",
        "//protos/escapist:Cargo.toml",
        "//rust/helloworld_tonic:Cargo.toml",
        "//rust/escapist:Cargo.toml",
    ],
)

crate.annotation(
    crate = "protoc-gen-prost",
    gen_binaries = ["protoc-gen-prost"],
)

crate.annotation(
    crate = "protoc-gen-tonic",
    gen_binaries = ["protoc-gen-tonic"],
)

use_repo(crate, "crates")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")

llvm.toolchain(
    name = "llvm_toolchain",
    llvm_versions = {
        "": "15.0.6",
        "darwin-aarch64": "15.0.7",
        "darwin-x86_64": "15.0.7",
    },
)

use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

register_toolchains("@llvm_toolchain//:all")

bazel_dep(name = "rules_java", version = "7.11.1")
bazel_dep(name = "contrib_rules_jvm", version = "0.27.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)

git_override(
    commit = "a14ad3a64e7bf398ab48105aaa0348e032ac87f8",
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "buildifier_prebuilt", dev_dependency = True, version = "7.3.1")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")

go_sdk.download(version = "1.23.0")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")

go_deps.from_file(go_mod = "//:go.mod")

use_repo(
    go_deps,
    "com_github_gofiber_fiber_v2",
    "org_golang_google_grpc",
    "com_github_go_sql_driver_mysql",
)

non_module_deps = use_extension("//bazel:extensions.bzl", "non_module_deps")

use_repo(non_module_deps, "mongoose_cc")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

JACKSON_VERSION = "2.17.1"

LOGBACK_VERSION = "1.5.6"

maven.install(
    artifacts = [
        "ch.qos.logback:logback-classic:%s" % LOGBACK_VERSION,
        "ch.qos.logback:logback-core:%s" % LOGBACK_VERSION,
        "com.fasterxml.jackson.core:jackson-annotations:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.core:jackson-core:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.core:jackson-databind:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.datatype:jackson-datatype-guava:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:%s" % JACKSON_VERSION,
        "com.fasterxml.jackson.module:jackson-module-scala_2.13:%s" % JACKSON_VERSION,
        "com.google.guava:guava:33.3.0-jre",
        "io.netty:netty-common:4.1.113.Final",
        "io.netty:netty-codec:4.1.113.Final",
        "io.netty:netty-handler:4.1.113.Final",
        "io.netty:netty-transport:4.1.113.Final",
        "io.sentry:sentry-logback:7.14.0",
        "junit:junit:4.13.2",
        "org.assertj:assertj-core:3.26.3",
        "org.scala-lang:scala3-library_3:jar:3.3.1",
        "org.scala-lang:scala3-compiler_3:3.3.1",
        "org.slf4j:slf4j-api:2.0.16",
    ],
    repositories = [
        "https://maven.google.com",
        "https://repo1.maven.org/maven2",
    ],
)

use_repo(maven, "maven")

bazel_dep(name = "grpc-java", version = "1.66.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_oci", version = "2.0.0")

# For testing, check out https://registry.bazel.build/modules/container_structure_test
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

oci.pull(
    name = "docker_lib_ubuntu",
    digest = "sha256:2e863c44b718727c860746568e1d54afd13b2fa71b160f5cd9058fc436217b30",
    image = "docker.io/library/ubuntu",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)

use_repo(oci, "docker_lib_ubuntu", "docker_lib_ubuntu_linux_amd64", "docker_lib_ubuntu_linux_arm64_v8", "docker_lib_ubuntu_linux_arm_v7", "docker_lib_ubuntu_linux_ppc64le", "docker_lib_ubuntu_linux_s390x")
